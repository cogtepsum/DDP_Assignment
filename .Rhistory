install.packages('lubridate')
install.packages('forecast')
install.packages('e1071')
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
rf <- train(y ~ ., data = vowel.train, method = 'rf')
library(caret)
rf <- train(y ~ ., data = vowel.train, method = 'rf')
set.seed(33833)
rf <- train(y ~ ., data = vowel.train, method = 'rf')
gbm <- train(y ~ ., data = vowel.train, method = 'gbm')
pred1 <- predict(rf, vowel.test)
pred2 <- predict(gbm, vowel.test)
confusionMatrix(pred1, vowel.test$y)
confusionMatrix(pred2, vowel.test$y)
predDF <- data.frame(pred1, pred2, vowel.test$y)
combMod <- train(y ~ ., method = 'gam', data = predDF)
predDF <- data.frame(pred1, pred2, y=vowel.test$y)
combMod <- train(y ~ ., method = 'gam', data = predDF)
combPred <- predict(combMod, predDF)
confusionMatrix(combPred, predDF)
confusionMatrix(combPred, predDF$y)
confusionMatrix(combPred, vowel.test$y)
predDF <- data.frame(p1 = pred1, p2 = pred2, y=vowel.test$y)
combMod <- train(y ~ ., method = 'gam', data = predDF)
combPred <- predict(combMod, predDF)
confusionMatrix(combPred, predDF$y)
combMod <- train(y ~ ., data = predDF)
combPred <- predict(combMod, predDF)
confusionMatrix(combPred, predDF$y)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
m1 <- train(diagnosis ~ ., data = training, method = 'rf')
summary(m1)
str(m1)
m2 <- train(diagnosis ~ ., data = training, method = 'gbm')
m3 <- train(diagnosis ~ ., data = training, method = 'lda')
pred1 <- predict(m1, testing)
pred2 <- predict(m2, testing)
pred3 <- predict(m3, testing)
confusionMatrix(pred1, testing$diagnosis)$Accuracy
confusionMatrix(pred1, testing$diagnosis)$acc
confusionMatrix(pred1, testing$diagnosis)$accuracy
confusionMatrix(pred1, testing$diagnosis)
confusionMatrix(pred2, testing$diagnosis)
confusionMatrix(pred3, testing$diagnosis)
predDF <- data.frame(pred1, pred2, pred3, testing$diagnosis)
combModFit <- train(diagnosis ~ ., data = predDF, method = 'rf')
predDF <- data.frame(pred1, pred2, pred3, diagnosis = testing$diagnosis)
combModFit <- train(diagnosis ~ ., data = predDF, method = 'rf')
combPred <- predict(combModFit, predDF)
confusionMatrix(combPred, predDF$diagnosis)
set.seed(62433)
m1 <- train(diagnosis ~ ., data = training, method = 'rf')
m2 <- train(diagnosis ~ ., data = training, method = 'gbm')
m3 <- train(diagnosis ~ ., data = training, method = 'lda')
pred1 <- predict(m1, testing)
pred2 <- predict(m2, testing)
pred3 <- predict(m3, testing)
confusionMatrix(pred1, testing$diagnosis)
confusionMatrix(pred2, testing$diagnosis)
confusionMatrix(pred3, testing$diagnosis)
predDF <- data.frame(pred1, pred2, pred3, diagnosis = testing$diagnosis)
combModFit <- train(diagnosis ~ ., data = predDF, method = 'rf')
combPred <- predict(combModFit, predDF)
confusionMatrix(combPred, predDF$diagnosis)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
?plot.enet
??plot.enet
mFit <- train(CompressiveStrength ~ ., data = concrete, method = 'lasso')
?plot.enet
plot.enet(nFit)
plot.enet(mFit)
plot.enet(x = mFit)
plot(x = mFit)
plot(x = mFit, xvar = 'penalty')
plot(x = mFit, xvar = 'step')
plot(x = mFit, xvar = 'L1norm')
plot.enet(x = mFit, xvar = 'L1norm')
mFit
coefficients(mFit)
mFit <- train(CompressiveStrength ~ ., data = concrete, method = 'lasso')
mFit <- train(CompressiveStrength ~ ., data = concrete, method = 'enet')
plot(x = mFit, xvar = 'step')
mFit <- train(CompressiveStrength ~ ., data = concrete, method = 'lasso')
mFit$beta.pure
plot(x = mFit, xvar = 'step')
plot.enet(mFit, xvar = 'step')
mFit <- train(CompressiveStrength ~ ., data = concrete, method = 'lasso', na.action = na.roughfix)
plot.enet(mFit, xvar = 'step')
plot.enet(mFit)
mFit <- train(CompressiveStrength ~ ., data = concrete, method = 'lasso')
mFit <- train(CompressiveStrength ~ ., data = training, method = 'lasso')
plot.enet(mFit)
mFit
mFit$finalModel
plot.enet(mFit$finalModel)
plot.enet(mFit$finalModel['CoarseAggregate'])
plot.enet(mFit$finalModel)
plot.enet(mFit$finalModel, cex = 0.5)
plot.enet(mFit$finalModel, cex.lab = 0.5)
plot.enet(mFit$finalModel, cex.axis = 0.5)
help(par)
plot.enet(mFit$finalModel, cex.sub = 0.5)
plot.enet(mFit$finalModel, cex.main = 0.5)
plot.enet(mFit$finalModel, cex = 0.5)
plot.enet(mFit$finalModel, cex.axis = 0.5)
plot.enet(mFit$finalModel, ps = 0.5)
plot.enet(mFit$finalModel, font.axis = 0.5)
plot.enet(mFit$finalModel, cex = 0.5)
plot.enet(mFit$finalModel, cex = 0.1)
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(forecast)
mFit <- bats(training)
mFit <- bats(visitsTumblr ~ ., data = training)
mFit <- bats(training, use.parallel = F)
mFit <- bats(training)
mFit <- bats(tstrain)
pred <- forecast.bats(mFit, testing$date)
pred <- forecast.bats(mFit, testing)
pred <- forecast.bats(mFit, 235)
confusionMatrix(pred, testing$visitsTumblr)
confusionMatrix(pred$y, testing$visitsTumblr)
confusionMatrix(pred$, testing$visitsTumblr)
confusionMatrix(pred$x, testing$visitsTumblr)
accuracy(pred)
accuracy(pred, testing$visitsTumblr)
summary(pred)
pred$forecasts
pred$Forecasts
sum(sapply(testing$visitsTumblr >= pred$lower & testing$visitsTumblr <= pred$upper))
s <- 0
for i in 1:325;
for i in 1:325 {
if (testing[i, 'visitsTumblr'] >= pred$lower[i] & testing[i, 'visitsTumblr'] <= pred$upper[i]) {
s <- s + 1
}
}
for i in 1:325 {
if (testing['visitsTumblr', i] >= pred$lower[i] & testing[i, 'visitsTumblr'] <= pred$upper[i]) {
s <- s + 1
}
}
for (i in 1:325) {
if (testing[i, 'visitsTumblr'] >= pred$lower[i] & testing[i, 'visitsTumblr'] <= pred$upper[i]) {
s <- s + 1
}
}
for (i in 1:235) {
if (testing[i, 'visitsTumblr'] >= pred$lower[i] & testing[i, 'visitsTumblr'] <= pred$upper[i]) {
s <- s + 1
}
}
s
s <- 0
for (i in 1:235) {
if (testing[i, 'visitsTumblr'] >= pred$lower[i] & testing[i, 'visitsTumblr'] <= pred$upper[i]) {
s <- s + 1
}
}
s
201/235
pred <- forecast.bats(mFit, 235, level = 95)
pred <- forecast(mFit, 235, level = 95)
accuracy(pred, testing$visitsTumblr)
s <- 0
for (i in 1:235) {
if (testing$visitsTumblr[i] > pred$lower[i] & testing$visitsTumblr[i] < pred$upper[i]) {
s <- s + 1
}
}
s
s/235 * 100
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
mFit <- train(CompressiveStrength ~ ., data = training, method = 'svm')
library(e1071)
mFit <- svm(CompressiveStrength ~ ., data = training)
pred <- predict(mFit, testing)
summary(pred)
summary(mFit)
rmse <- function(error)
{
sqrt(mean(error^2))
}
error <- mFit$residuals
predictionRMSE <- rmse(error)
install.packages('shinyapps')
install.packages('shiny')
library(devtools)
install_github('rstudio/shinyapps')
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
install_github('ramnathv/slidify')
install_github('ramnathv/slidifyLibraries')
install_github('ramnathv/rCharts')
install.packages('googleVis')
install.packages('leaflet')
install_github("ropensci/plotly")
Slide With Code
- Bullet 2
source('~/Desktop/xray_attenuation_plot.R')
nclust <- runif(2, min = -1, max = 1)
c1 <- rnorm(100, mean = nclust[0], sd = 1)
nclust
nclust <- runif(2, min = -1, max = 1)
nclust
c1 <- rnorm(100, mean = nclust[0], sd = 1)
c1 <- rnorm(100, mean = nclust[1], sd = 1)
c2 <- rnorm(100, mean = nclust[2], sd = 1)
Xcenters <- runif(2, min = -1, max = 1)
Ycenters <- runif(2, min = -1, max = 1)
clst1X <- rnorm(100, mean = Xcenters[1], sd = 1)
clst1Y <- rnorm(100, mean = Ycenters[1], sd = 1)
clst2X <- rnorm(100, mean = Xcenters[2], sd = 1)
clst2Y <- rnorm(100, mean = Ycenters[2], sd = 1)
clst1 <- cbind(clst1X, clst1Y)
clst2 <- cbind(clst2X, clst2Y)
data <- rbind(clst1, clst2)
plot(data)
source('~/.active-rstudio-document')
install.packages('dbscan')
library(dbscan)
scn <- dbscan(data, eps = 0.1)
scn$cluster
scn <- dbscan(data, eps = 0.5)
scn$cluster
scn <- dbscan(data, eps = 0.2)
scn$cluster
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
View(data)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
typeof(data)
zu <- double()
zu <- rbind(zu, data)
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
setwd("~/Desktop/kmeansexample")
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
library(shiny)
runApp('kmeansexample')
setwd("~/Desktop")
runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
source('~/Desktop/ddp_att_1.R')
shiny::runApp('kmeansexample')
View(data)
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
plot(data)
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
source('~/Desktop/ddp_att_1.R')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
install.packages('fpc')
source('~/Desktop/ddp_att_1.R')
dist(data)
library(fpc)
cluster.stats(clustering = kmeans(data, centers = 2)$cluster)
cluster.stats(d = data, clustering = kmeans(data, centers = 2)$cluster)
cluster.stats(d = dist(data), clustering = kmeans(data, centers = 2)$cluster)
clustering = kmeans(data, centers = 2)
clustering
clustering$withinss
library(mclust)
fit <- Mclust(data)
plot(fit)
summary(fit)
plotcluster(data, kmeans(data, centers = с)$cluster)
plotcluster(data, kmeans(data, centers = 2)$cluster)
plotcluster(data, kmeans(data, centers = 3)$cluster)
clusplot(data, kmeans(data, centers = 3)$cluster)
library(cluster)
clusplot(data, kmeans(data, centers = 3)$cluster)
clusplot(data, kmeans(data, centers = 4)$cluster)
clusplot(data, kmeans(data, centers = 5)$cluster)
clusplot(data, kmeans(data, centers = 5)$cluster, color = T, shade = T)
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample', mode = 'showcase')
shiny::runApp('kmeansexample', display.mode = 'showcase')
shiny::runApp('kmeansexample')
runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
citation("mclust")
shiny::runApp('kmeansexample')
*Chris Fraley and Adrian E. Raftery* (2002) Model-based Clustering, Discriminant Analysis and Density Estimation Journal of the American Statistical Association 97:611-631
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
shiny::runApp('kmeansexample')
library(cluster)
citation('cluster')
citation('shiny')
citation('ggplot2')
shiny::runApp('kmeansexample')
library(shinyapps)
shinyapps::setAccountInfo(name='cogtepsum',
token='F0F1A32B544E12690E323EDBA4A2F5DC',
secret='UdaIm3uhJ7PfJpkWeUz3zHNBCl6wp88MxYgx43q2')
getwd()
shinyapps::deployApp('/home/user/Desktop/kmeansexample')
setwd("~/Desktop/kmeansexample")
shinyapps::deployApp('/home/user/Desktop/kmeansexample')
deployApp()
deployApp()
